#!/usr/bin/env node

const path = require('path');
const yargs = require('yargs');
const Automate = require('..');

function getDefaultPort(dialect) {
  switch (dialect.toLowerCase()) {
    case 'mssql':
      return 1433;
    case 'postgres':
      return 5432;
    default:
      return 3306;
  }
}

const { argv } = yargs
  .usage('Usage: sequelize-auto -h <host> -d <database> -u <user> -x [password] -p [port]  --dialect [dialect] -c [/path/to/config] -o [/path/to/models] -t [tableName]')
  .demand(['h', 'd'])
  .alias('h', 'host')
  .alias('d', 'database')
  .alias('u', 'user')
  .alias('x', 'password')
  .alias('p', 'port')
  // .alias('c', 'config')
  .alias('t', 'type')
  .alias('o', 'output')
  .alias('e', 'dialect')
  // .alias('a', 'additional')
  // .alias('t', 'tables')
  // .alias('T', 'skip-tables')
  .alias('C', 'camel')
  // .alias('n', 'no-write')
  // .alias('s', 'schema')
  // .alias('z', 'typescript')
  // .alias('f', 'camel-file-name')
  .describe('h', 'IP/Hostname for the database.')
  .describe('d', 'Database name.')
  .describe('u', 'Username for database.')
  .describe('x', 'Password for database.')
  .describe('p', 'Port number for database. It is not for sqlite. ex) MySQL/MariaDB: 3306, Postgres: 5432, MSSQL: 1433')
  // .describe('c', 'JSON file for Sequelize\'s constructor "options" flag object as defined here: https://sequelize.readthedocs.org/en/latest/api/sequelize/')
  .describe('o', 'What directory to place the models.')
  .describe('e', 'The dialect/engine that you\'re using: postgres, mysql, sqlite, mssql')
  // .describe('a', 'Path to a json file containing model definitions (for all tables) which are to be defined within a model\'s configuration parameter. For more info: https://sequelize.readthedocs.org/en/latest/docs/models-definition/#configuration')
  // .describe('t', 'Comma-separated names of tables to import')
  // .describe('T', 'Comma-separated names of tables to skip')
  .describe('C', 'Use camel case to name models and fields');
  // .describe('n', 'Prevent writing the models to disk.')
  // .describe('s', 'Database schema from which to retrieve tables')
  // .describe('z', 'Output models as typescript with a definitions file')
  // .describe('f', 'Use camel case for file name');

// TODO: config file

const dbOptions = {
  dialect: argv.e || 'mysql',
  host: argv.h || '127.0.0.1',
  port: argv.p || getDefaultPort(),
};

const options = {
  type: argv.t || 'js',
  camelCase: !!argv.C,
  dir: argv.o || path.resolve(`${process.cwd()}/models`),
};


const automate = new Automate(argv.d, argv.u, argv.x, dbOptions, options);

automate.then((code) => {
  // eslint-disable-next-line
  console.log(code);
  // eslint-disable-next-line
  console.log('Done!');
}).catch((e) => {
  // eslint-disable-next-line
  console.log(e);
});
